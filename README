The game can be run in 4 modes in decreasing order of winning chances:

(1)	python game.py best_play
		Uses expectimax algorithm with cardcounting to get the next best move
(2)	python game.py basic_strategy
		Uses expectimax algorithm without cardcounting to get the next best move
(3)	python game.py selfish
		The player looks at only their card to decide the next best move
(4)	python game.py random
		Picks a random move between 'Hit' or 'Stand'


Running with any other flag or without a flag gives an error



BlackJack is a popular casino card game where each player plays against the dealer. The objective of the game is to get a hand with a sum of cards as close to 21 as possible, without exceeding it. The value of the cards is determined as follows: cards from 2 to 10 are worth their face value, face cards (King, Queen, Jack) are worth 10 points, and Aces are worth 1 or 11 points, depending on which value gives the player the highest hand value without exceeding 21.

This implementation of BlackJack is written in Python and includes a class called BlackJackGame that provides methods for playing the game. The implementation assumes that there is only one deck of cards used per game round, and the game is played by a single player against the dealer.

The BlackJackGame class has the following methods:

__init__(self, numPlayers, numGameRounds): Constructor method that initializes the game with the given number of players and game rounds. It also initializes the shoe by creating multiple decks of cards and shuffling them.
playGame(self): Method that starts the game and lets players play their turns against the dealer.
getCard(self): Method that returns a card from the shoe and increments the current card index.
startRound(self): Method that starts a new game round by assigning two cards to each player, including the dealer.
getSumOfCards(self, cards): Method that returns the sum of the given cards, taking into account the value of Aces.
getDealerVisibleCards(self): Method that returns the visible cards of the dealer, which is the second card in the dealer's hand.
getDealerTopCard(self): Method that returns the top card of the dealer's hand.
getCurrentTurn(self): Method that returns the index of the player whose turn it currently is.
getOptimalSum(self, cardSumTuple): Method that returns the largest possible sum of cards that is less than or equal to 21.
The game is played by calling the playGame() method of a BlackJackGame object. During each game round, the player can choose to either "hit" (request another card) or "stand" (end their turn without requesting another card). If the player's hand exceeds 21, they lose. If the player's hand is equal to or less than 21 and is higher than the dealer's hand, the player wins. If the player's hand is equal to or less than 21 and is lower than the dealer's hand, the player loses. If the player's hand and the dealer's hand have the same value, it is a tie.

The implementation also includes data structures to keep track of game statistics, such as the win percentage of each player and the cards played in each hand. These data structures are updated after each game round.